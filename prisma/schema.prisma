generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String?
  name          String
  phone         String
  district      String      // 선거구
  role          UserRole    @default(COUNCILOR)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  complaints    Complaint[]
  schedules     Schedule[]
}

model Complaint {
  id              String            @id @default(uuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  
  // 민원인 정보
  complainantName String
  complainantPhone String
  complainantEmail String?
  
  // 민원 내용
  title           String
  content         String            @db.Text
  category        String
  department      String?           // 담당 부서
  status          ComplaintStatus   @default(RECEIVED)
  priority        Priority          @default(MEDIUM)
  
  // AI 분석 결과
  aiSummary       String?           @db.Text
  aiKeywords      String[]
  aiSentiment     String?
  aiDepartment    String?
  
  // 처리 정보
  processNote     String?           @db.Text
  responseContent String?           @db.Text
  completedAt     DateTime?
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  attachments     Attachment[]
  schedules       Schedule[]
  histories       ComplaintHistory[]
}

model Attachment {
  id          String    @id @default(uuid())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  
  fileName    String
  fileUrl     String
  fileSize    Int
  mimeType    String
  
  createdAt   DateTime  @default(now())
}

model Schedule {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  complaintId String?
  complaint   Complaint? @relation(fields: [complaintId], references: [id])
  
  title       String
  description String?
  scheduledAt DateTime
  location    String?
  reminder    Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ComplaintHistory {
  id          String    @id @default(uuid())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  
  action      String
  description String?
  fromStatus  ComplaintStatus?
  toStatus    ComplaintStatus?
  
  createdAt   DateTime  @default(now())
}

model Department {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  phone       String?
  email       String?
  keywords    String[] // AI 매칭용 키워드
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  COUNCILOR
  ADMIN
  STAFF
}

enum ComplaintStatus {
  RECEIVED    // 접수
  IN_PROGRESS // 진행중
  PENDING     // 보류
  COMPLETED   // 완료
  REJECTED    // 반려
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}